<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Course Overview &amp; Shell</title>
      <link href="/2020/03/17/missing/one/"/>
      <url>/2020/03/17/missing/one/</url>
      
        <content type="html"><![CDATA[<h1 id="Course-overview-amp-the-Shell"><a href="#Course-overview-amp-the-Shell" class="headerlink" title="Course overview &amp; the Shell"></a>Course overview &amp; the Shell</h1><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol><li><p>Create a new directory called <code>missing</code> under <code>/tmp</code>.</p><pre class=" language-shell"><code class="language-shell"> mkdir /tmp/missing</code></pre></li><li><p>Look up the <code>touch</code> program. The <code>man</code> program is your friend.</p><pre class=" language-shell"><code class="language-shell"> man touch</code></pre></li><li><p>Use <code>touch</code> to create a new file called <code>semester</code> in <code>missing</code>.</p><pre class=" language-shell"><code class="language-shell"> # cd /tmp/missing/ && touch semester touch /tmp/missing/semester</code></pre></li><li><p>Write the following into that file, one line at a time.</p><pre class=" language-shell"><code class="language-shell"> # Use the > redirection symbol and >> to append the second line echo '#!/bin/sh' > semester echo 'curl --head --silent https://missing.csail.mit.edu' >> semester</code></pre><blockquote><p>The <em>history expansion</em> character, usually <code>i</code>, must be quoted to prevent history expansion. <code>''</code> treats the contents inside as literal value, it won’t change anything. <code>""</code> preserves the literal value of all characters within the quotes, with the exception of <code>$</code>,<code>\</code>,<code>"</code>,or newline.<a href="https://stackoverflow.com/questions/6697753/difference-between-single-and-double-quotes-in-bash" target="_blank" rel="noopener">See here</a></p></blockquote></li><li><p>Try to execute the file, i.e. type the path to the script (<code>./semester</code>) into your shell and press enter.</p><pre class=" language-shell"><code class="language-shell"> # Shell Prompt: # zsh: permission denied: ./semester ls -l # We can see semester has no excucute permission</code></pre></li><li><p>Run the command by explicitly starting the <code>sh</code> interpreter, and giving it the file <code>semester</code> as the first argument, i.e. <code>sh semester</code>. Why does this work, while <code>./semester</code> didn’t?</p><blockquote><p>When we run sh interpreter and give <code>semester</code> as it’s argument, we actually use the <code>sh</code> program to read the <code>semester</code> file’s content and run the <code>sh</code> program instead of running <code>semester</code> script directly.</p></blockquote></li><li><p>Look up the <code>chmod</code> program (e.g. use <code>man chmod</code>).</p><pre class=" language-shell"><code class="language-shell">man chmod</code></pre></li><li><p>Use <code>chmod</code> to make it possible to run the command <code>./semester</code> rather than having to type <code>sh semester</code>. How does your shell know that the file is supposed to be interpreted using <code>sh</code>?</p><pre class=" language-shell"><code class="language-shell"> chmod +x semester # shebang lines including a path to choose which interpreter to use.</code></pre></li><li><p>Use <code>|</code> and <code>&gt;</code> to write the “last modified” date output by <code>semester</code> into a file called <code>last-modified.txt</code> in your home directory.</p><pre class=" language-shell"><code class="language-shell">./semester | grep -i "last-modified" > /home/last-modified.txt</code></pre></li><li><p>Write a command that reads out your laptop battery’s power level or your desktop machine’s CPU temperature from <code>/sys</code>. Note: if you’re a macOS user, your OS doesn’t have sysfs, so you can skip this exercise.</p><pre class=" language-shell"><code class="language-shell"># Actually I am using macOS, and I run the command in WSL for Win10 on my Desktop.# It works fine.cat /sys/class/power_supply/battery/capacity# And the WSL can't fetch temperature, you can see it in /sys/class/thermal</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/17/hello-world/"/>
      <url>/2020/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
